import chess
import chess.pgn
import numpy as np
import requests
import os
from tensorflow import keras
from tensorflow.keras import layers
from urllib.parse import urljoin



def fetch_games_from_lichess(username, count):
    url = f"https://lichess.org/api/games/user/{username}?max={count}"
    headers = {"Accept": "application/x-ndjson"}

    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        game_urls = []
        for line in response.iter_lines(decode_unicode=True):
            if line:
                game = json.loads(line)
                game_id = game["id"]
                game_url = f"https://lichess.org/game/export/{game_id}.pgn"
                game_urls.append(game_url)
        return game_urls
    else:
        print(f"Failed to fetch games. Status code: {response.status_code}")
        return None


# Generate PGN data from game URLs
def generate_pgn_data(game_urls):
    pgn = ""
    for game_url in game_urls:
        try:
            pgn_data = requests.get(game_url).text
            pgn += pgn_data + "\n\n"
        except Exception as e:
            print(f"Failed to fetch game PGN. Error: {e}")

    return pgn.strip()


# Save PGN data to file
def save_pgn_data(pgn_data, file_path):
    with open(file_path, "w") as f:
        f.write(pgn_data)
    print("PGN data saved successfully.")

#Define the CNN model architecture
model = keras.Sequential([
    layers.Conv2D(64, (3, 3), activation='relu', padding='same', input_shape=(8, 8, 12)),
    layers.Conv2D(64, (3, 3), activation='relu', padding='same'),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(64, activation='relu'),
    layers.Dense(1, activation='sigmoid')
])

#Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy')

def train_model_with_validation(pgn_file):
    x_train, y_train, x_val, y_val = generate_training_and_validation_data(pgn_file)
    model.fit(x_train, y_train, validation_data=(x_val, y_val), epochs=10, batch_size=32)

def make_move(board):
    legal_moves = list(board.legal_moves)
    move_scores = []

    for move in legal_moves:
        # Make a copy of the board to test the move
        board_copy = board.copy()
        board_copy.push(move)

        # Check if the resulting position is legal
        if board_copy.is_legal(move):
            # Convert the board copy to the numerical representation
            input_data = np.zeros((8, 8, 12), dtype=np.uint8)
            for square, piece in board_copy.piece_map().items():
                row = chess.square_rank(square)
                col = chess.square_file(square)
                input_data[row, col, piece.piece_type] = piece.color * 6 + piece.piece_type

            # Predict the probability of winning after making the move
            move_data = np.expand_dims(input_data, axis=0)
            move_score = model.predict(move_data)[0][0]

            move_scores.append((move, move_score))

    if move_scores:
        # Sort the moves by predicted score in descending order
        move_scores.sort(key=lambda x: x[1], reverse=True)

        # Select the move with the highest predicted score
        best_move = move_scores[0][0]

        # Validate the legality of the best move
        if best_move in legal_moves and board.is_legal(best_move):
            # Apply the selected move to the board
            board.push(best_move)
        else:
            print("Invalid move selected. Choosing a random legal move.")
            best_move = np.random.choice(legal_moves)
            board.push(best_move)

        print("Best Move:", best_move)
        return best_move
    else:
        print("No legal moves found. Game over.")
        return None

def play_match():
    board = chess.Board()

    while not board.is_game_over():
        if board.turn == chess.WHITE:
            # Human player's move
            print("Current board:")
            print(board)
            move_uci = input("Enter your move in UCI notation (e.g., e2e4): ")
            move = chess.Move.from_uci(move_uci)
        else:
            # Neural network's move
            move = make_move(board)

        # Validate the legality of the move
        if move in board.legal_moves:
            board.push(move)
        else:
            print("Invalid move selected. Choosing a random legal move.")
            random_move = np.random.choice(list(board.legal_moves))
            board.push(random_move)

    print("Game over.")
    print("Result: ", board.result())


if __name__ == "__main__":
    username = "DrNykterstein"
    count = 10000
    file_path = "lichess_games.pgn"

    game_urls = fetch_games_from_lichess(username, count)
    if game_urls:
        pgn_data = generate_pgn_data(game_urls)
        if pgn_data:
            save_pgn_data(pgn_data, file_path)
            train_model_with_validation(file_path)

    play_match()
